---
title: Creating this blog Part 2
description: Basic blog structure
published_at: 2023-07-07
cover: /public/assets/img/profile.webp
---

# Without vite, swc complex config, just npx cli command
Nullstack is very consistent, because of this structure, everything in nullstack is based on things is were worked well along side the internet, isntead of create something like css module, for default nullstack support css and sass style.

For create and manager your aplication, you don´t need handle with complex stuff like vite , webpack or babel, Nullstack have a npx tool to create application , with is have some things on a opitional support like tailwind, typescript and sass support, is a convension over configuration like 


# First of all: Folder design

The first thing i start love in nullstack is about freedom, unlike next.js or angular you don´t have a definitive folder structure. According the documentation, the only thing you need is:

- A client.js file witch is used for loading global client stuff, like added a global event or consume an browser api like Localstorage
- A server.js file witch is used for loading server side things like enviroment virables, connect an api or even write an http endpoint (because the second great thing about nullstack, in terms of runtime is a simple express server running in Node.js with is have all libs you are loved)
- A Application.js/jsx/njs file because is like React, a App.js file for initialize your application

this structure is result of building project using the only nad recomended way, nullstack-create-app cli, you can lean more about this [in nullstack documentation](https://nullstack.app/getting-started)

for this project i use the command above

```bash
npx create-nullstack-app@latest project-name -tw
```

Yep, i don´t use typescript in this project because seens like overrated for this....

Now in project-name i can see a similar structure like this this structure

```textplain
- src
-- Application.jsx
-- Application.css
-- Counter.jsx
-- Home.jsx
- server.js
- client.js
- tailwind.config.js
```

next them i added some changes in my tailwind config file for support rose-pine thene and my fonts

for this project the first thing i do is added support or rose-pine colors (you can see my tailwind.config.js here)


the second one is create the post structure, it's a simple and very stupid idea, i create a folder called posts, and added some markdowns file wittch i use the filename as a subpath in my blog section, so for create a simple post i added a post here


the idea is using a node.js file systens functions to read this markdown and apply some styles using marked library (and some things is not work as well as you can see)

the first implementation is your post component, because there we create to functions, one for get post and metadata for file and another to walk thorought the directory post and create a list of post, i mean content and metadata

For access blog content you use /blog/some-post path, and they verify and get in /posts/some-post.md for contenrt

## DISCLAIMER 1:
I know this is not performatic way to do this because of two things
- The function for walking in directory is not optimized at all, also witch means we need iterate to every post and dcopllect every metadata and content like we do for show them, it's means , the scaklability of build time is incresead every time when i creating posts
- I need call all posts at once if i make this avaliable in SSG, because when i build one page, i need to call in prepare or initialize all posts and they not is performatic to show this list in to or many places

For you know about this , you need read Nullstack documentation about static and server side function, for now, you should know we create two server side GET functions, it's cool because since we move to SSR mode, nullstack generate a GET endpoint api for make requests, of course the path is a dibrish string , but if you need it's a very welll endpoint you should read more about server initialization in doc

for now i wrote a simple post component, like this

```jsx
import Nullstack from 'nullstack'
import fm from 'front-matter'
import { existsSync, readFileSync } from 'node:fs'
import fs from 'node:fs/promises'
import path from 'node:path'

class Post extends Nullstack {

  static async getPost({ key }) {
    const path = `posts/${key}.md`
    if (!existsSync(path)) {
      return null
    }
    let data = readFileSync(path, 'utf-8')

    const { attributes, body } = fm(data)

    return {
      html: body,
      name: key,
      ...attributes,
    }
  }

  static async getAllPost(context) {
    const directoryPath = 'posts'
    const files = await fs.readdir(directoryPath)
    const filteredFiles = []
    for (const file of files) {
      const filePath = path.join(directoryPath, file)
      const fileStats = await fs.stat(filePath)

      if (fileStats.isFile() && path.extname(file) === '.md') {
        const data = await Post.getPost({ ...context, key: file.replace('.md', '') })
        filteredFiles.push(data)
      }
    }
    return filteredFiles
  }

  async initiate({ page, params, router }) {
    const article = await Post.getPost({
      key: params.slug !== '' ? params.slug : router.path.slice(1),
    })

    page.title = article.title
    if (article?.description) {
      page.description = article.description
    }
    if (article?.cover) {
      page.image = article.cover.replace('/public', '')
    }
    Object.assign(this, article)
  }

  render({ router }) {
    if (!this.html && this.initiated) {
      router.path = '/404'
    }

    return (
      <>
        <header class="mx-auto mb-16 mt-8 max-w-[900px] flex flex-col gap-y-4 content-between break-words">
          <h1 class="text-4xl font-bold text-rosePine-love">{this?.title}</h1>
          {this.description && <h2 class="text-2xl font-bold text-rosePine-gold mb-4">{this?.description}</h2>}
        </header>
        <article html={this.html} class="mx-auto max-w-[900px]" />

      </>
    )
  }
}

export default Post
```

as you can se, we wrote 73 lines and this is almost everything we need for blog

the function `getPost` is a server side function witch receiver key arg, this ar is a name for file , also is a path for this post in page blog , it's like a node.js function witch go to specific path and find if this file exists 

if were is we use a library called front-matter for extract some markdown meatda

the function getAllPost is for search all posts and putting in a list, but is not called here, i mantaining here because is more simple to move them to another component, since this component is everythong about post

in initiate method is were magic is work, they called getPost using a router slug to get path fot this post, 
for now in this way, we not allowed to have subpath in posts directory.

the method Object.assign is useful here, since everything in nullstack is proxable , using this way we sure wen the function initiate is ending, they had article object  assign with post content and meatada

and the last lines is like a react jsx, we ehere know there, get some props and render them

now, we need to setup a blog router and home page

In render method is were the main component is render and you see a litle condition , if dont have any content, go to 404 page, as you can see, in nullstack router object is avaliable in every client side cycle injectable by framework, just change the path to redirect interal path, if you need a external redirect , you can use router.url instead

Now, we need make some changes in  `Application.jsx` file, because this is entry point for front end


for now we just add a /blog path and some navbar element

```jsx
import Nullstack from 'nullstack'
import '../tailwind.css'
import Post from './Post.jsx'

class Application extends Nullstack {


  renderHead() {
    return (
      <head>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" />
      </head>
    )
  }

  renderFooter() {
    return (
      <footer class='pt-6 flex flex-col max-w-[900px] mx-auto my-8 inset-x-0 bottom-0 lg:items-start items-center gap-4 text-center lg:text-start border-t-rosePine-surface border-t-[1px]'>
        <p>Developed with &#128156; by victorfernandesraton</p>
        <a href='https://nullstack.app/'>
          <p>Powered by</p>
          <Logo height={20} light />
        </a>
      </footer>
    )
  }

  renderBody({ children }) {
    return (
      <>
        <Head />
        <Navbar />
        <body class="bg-rosePine-base text-rosePine-text lg:px-0 px-4 h-fulli">
          {children}
        </body>
        <Footer />
      </>
    )
  }

  render({ router, page }) {
    return (
      <Body>
        <Post route="/blog/:slug" key={router.path} />
      </Body>
    )
  }

}

export default Application
```

As you can see i also adding Footer , body and Navbar component, most for organization, and in navbar we have nothing , ok we create a blank page, with router it is not working, because of this i create Home component for show some content


And i using initiate method again for get a list of existing posts, and render in List component, it's very simple


Now just need create some post and ta-dah, where is , a list and post render as a markdown, but wait, we neeed addin some style right?

for this i just using two libraries, highlight.js for generate highlight stylesheet for coding in markdown and marked library witch is a markdown to html parser witch is allow to override some html classes

because of separation of concerms, i create /lib/markd/MarkedParser.js for putting all thngs about markdown, and loading in server side, there is some dowbreaks here, i dont figure out how to resolve marked dependencies for they work i client side only, because of this , i make this work as a singleton in server side , witch means , we genereate only one time and all parsing processing occours in build time, in the end we generate only static html posts and some js and css dependencies,  but all components is rendered as a static content 


i apply some styles here

and add some custon cvolors in tailwind configuration and eere is, the blog is aliver


now you need using a build command like , henerate a static content in dist and publish in every place yo want



