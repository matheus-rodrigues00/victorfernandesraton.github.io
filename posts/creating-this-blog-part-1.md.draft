---
title: Creating this blog Part 1
description: Nullstack - A journey of Simplicity and Flexibility
published_at: 2023-06-21
cover: /public/assets/img/react-ecosystem.jpg
---

# A big dsclaimer first

First of all, I don't advise anyone to create a blog from scratch. Seriously, while it may seem like a fun project at first, it can quickly become challenging and time-consuming. There are many obstacles along the way that require time and effort to overcome. So, consider it an experimental endeavor.

Additionally, I don't have any plans to add what I call "Social Features" to this blog, such as comments. This blog is not meant to be a democratic platform or a debate club. It's simply a space for me to share my opinions and ideas. You have the right to disagree, but I also have the right to ignore your opinion if I find it unhelpful.

Throughout this series of posts, I may criticize certain solutions, but that doesn't mean I hate the people who build or use them. If those solutions work for you, who am I to change your mind? Don't outsource your decision-making to others.

# Prologue

![image](/public/assets/img/react-is-cool.png)

Creating this blog has been a significant endeavor for me, driven by various factors despite the challenges of the past three years, including the impact of COVID-19. Throughout my journey, I grew disillusioned with frameworks like React, finding their functional concepts and state management capabilities insufficient. Additional dependencies like Redux and styled-components only added to the complexity.

Every single project is a dependency nightmare, and you deposite many resources for just keep all things done, it's not only in react, all javascript ecossystem is a big mess, many depencies , many solutions, and worst decisios, incosistency along dependencies and decisions, missinformation and the messy is big.

React is so strange that is not vanilla javascript anymore, and nowdays i seen is like overthinking solutions, for example, in React we use a virtual DOM solution, they have god and bad use cases , in some cases articles like [this](https://svelte.dev/blog/virtual-dom-is-pure-overhead) shows off , but in most cases virtual DOM is just ok, now we have project called , witch is goal is "Remove virtual DOM", personally i know virtual DOM for me is a bad decision , that soulving nothing better tham update DOM, is a one more layer for allow react to work witch your own data model, and nowdays some projects like swelte and solid has a solution for this without this overhead, and others solutions like hotwire in ruby is great too.

In resume , virtual DOM is a legacy feature and i see in next years react change to not use them anymore, but this takle some time to work on reality


# React, Redux, Styled-component and many others solutions

![image](/public/assets/img/react-ecosystem.jpg)

Along this time, a work a full time in project at EcGlobal Solutins, of course, we chose React as a fundation of ecglobal.com, in this time we have a goal to create an modular social network, it's great project build by great people, but we hame many challanges.

The frist one is about state manager, if you need make simple things , you dont note , and seens easy right? the chalange begins wen we have a theme manager, multilanguage support, some global states to share like user data and local state to mantain, like management for post creator, or maybe a analytcs solution.

In this time SEO is a challange, Next.js is not have all resources we have today, we use solutions like React Helmet , and we have some limitations like when sharing a link, we don't can load things like images from posts and user icon, because thsi things is loading inside of applicaion, in client

And you try manager some complex form manager? we try create internal solutions called DynamicForms, but nowdays i see how very useless is are, managemnt form state is very confusing, and we think is react approach is very useful when we start, but useEffect and useCallback is the root of 1 of 3 bugs we have fix later.

Of course, we try using react-form-hooks, is a great solution , but still , is not a "default solution" it is a more one library to mantain

And yes, react is very stensible, but the drawback is you have a responsability to kkep a sort of compatibility bewtween this libs, for example, because of we use a solution called react-admin , witch is depend of react-router-dom v5 solution in tegse times, we kept react-router in v5 an least a year since react router v6 is launched until we refactoring all solutions in react-admin to built in solutions


# The Rising of Next.js

![image](/public/assets/img/next-and-vercel.png)

Nowdays we have Next.js, is a meta framework creating using react as a backbone, is very useful , he had some great solutionas such as router and hyperlink manager, SSG and SSR features, but the drowbacks is there. The worst is vendor lock in, since the companny with developer him is a vercel, and they have ammount of solutions to cloud and infreaestructure and Next.js is build for work in your infra, of course you can run nullstack outside in vercel, but is a big challange and the business model in vercel is not have agoal for make things easuer outside a vercel solution.

Nowdays we have a next.js 13 (yep, PHP in javascript), i personally love and at same time hate the page structure where they use, in one side is good, because in general you make that division too, but at same time this remove your freedon to decide how the things wirk in your side, as a example, this blog, as i cam explain in next post, i have a simple approach for router things, and i don´t see any need for creating a directory structure like `/blogs/{id}.jsx` , in my case i have a /posts directory witch is have an one simple markdown file for every post, in future maybe i will create one directory for every post and maybe have one markdown and many media files , but for now, this simple solution fit with my goals and i have a power to change this in future, it's a personal opinion, but for me every project ahs your needs and decisios like structure directory is change with the goals of product.

# Other solutions

Things like Hugo or Wordpress is good either, but i have some troubles in costumization, expanding , of course, if you chase a simle and not ahrder to keep blog framework, hugo is very nice solution, but the point here is keep the simplicity and enbrace the world of possibilities we have in nowdays.

# JavaScript frameworks: Odyssey to Chaos

Exploring alternative solutions such as Vue, Angular, and Svelte, I encountered limitations and vendor lock issues, along with the need to learn specific directives and module management. However, my discovery of Nullstack brought newfound hope. Initially seen as heretical due to its utilization of ES6 classes and named methods for component cycles, I soon recognized its brilliance and potential.

Nullstack stands out for its simplicity, utilizing class props for streamlined data management instead of convoluted states. Its superior application context eliminates the need for a Redux store. Notably, Nullstack's built-in support for progressive web app (PWA) capabilities without additional dependencies surpasses the SEO capabilities of Next.js projects.

# Fine: the great solution

Moreover, Nullstack supports various application architectures, including single-page applications (SPAs), static HTML, and Node servers with Express. Its lack of vendor lock enables projects to run on diverse infrastructures, from on-premises to cloud-based environments.

In conclusion, my journey of creating this blog led me to discover Nullstack—a solution that embodies simplicity and flexibility, allowing developers to leverage browser APIs without unnecessary complications. It has revitalized my appreciation for JavaScript. Stay tuned for Part 2, where I will delve deeper into my experiences and i demonstrate how i created the basic structure of this blog.
